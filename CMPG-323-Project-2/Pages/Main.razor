@page "/main"

@using Microsoft.Extensions.Configuration
@using DataLibrary
@using CMPG_323_Project_2.Models
@inject IDataAccess _data
@inject IConfiguration _config
@inject NavigationManager Nav

<h3>Main</h3>
<body style="background :none">
    <label>Welcome, @Uname </label> <br />
    <div class="rounded">
        <img src="@Image" style="width: 250px; height: 250px" /> <br />
        <InputFile OnChange="@FileChange"></InputFile>
        <button @onclick="@Upload">Upload</button>

    </div>

    <br />
    <h1>Welcome to your beautiful gallery</h1>

    <div class=" m-5 rounded" style="display : grid; width : 1100px">

        @foreach (var I in pictures)
        {
            <div style=" border:double ; display:flex; flex:auto; ">
                <img src="@I.Image" style="height : 250px ; width : 250px ; padding : 5px" />


                <label>Name : @I.Image_Name</label>
            </div>
        }
        @if (copyimage)
        {
            <label  style="color : darkred">This Image Name has already been taken. Sorry!!!</label>
        }
        @if (nullvalue)
        {
            <label  style="color : darkred">Please input name of image to be deleted.</label>
        }
        @if (notfound)
        {
            <label  style="color : darkred">Image name not found.</label>
        }
        <input type="text" @bind-value="Images.Image_Name" placeholder="Type the Name of the image you want to delete" />
        <button class="btn btn-outline-primary" @onclick="@Deleteenable">Delete</button>

        <InputFile OnChange="@UploadImages" multiple />
    </div>
</body>



@code {

    ImageModel Images = new ImageModel();
    UsersModel user = new UsersModel();
    List<ImageModel> pictures;
    List<UsersModel> users;
    private string Uname = Login.Name;
    private string pic;
    public static string Image { get; set; }
    public static string Image2 { get; set; }
    public bool copyimage = false;
    public bool nullvalue = false;
    public bool notfound = false;
    public string picname;


    protected override async Task OnInitializedAsync()
    {

        string sql = "select * from images WHERE Username = @username";
        pictures = await _data.LoadData<ImageModel, dynamic>(sql, new {username = Uname }, _config.GetConnectionString("default"));

        string sql2 = "select ProfilePicture from useraccount ";
        users = await _data.LoadData<UsersModel, dynamic>(sql2, new { username = Uname }, _config.GetConnectionString("default"));

        Image =  Login.Profilepic;

    }

    private async Task FileChange(InputFileChangeEventArgs fileChangeEvent)
    {
        var file = fileChangeEvent.File;

        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);
        pic = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task UploadImages(InputFileChangeEventArgs fileChangeEvent)
    {

        var file = fileChangeEvent.GetMultipleFiles();
        for(int i = 0; i < file.Count; i++)
        {
            var buffer = new byte[file[i].Size];
            await file[i].OpenReadStream(1512000).ReadAsync(buffer);
            Image2 = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
            foreach(var I in pictures)
            {
                if (file[i].Name == I.Image_Name)
                {
                    copyimage = true;
                    return;
                }
            }

            string sql = "insert into images(image_name,Image,Username) values (@imagename,@image,@username); ";
            await _data.SaveData(sql, new {imagename = file[i].Name, image = Image2, username = Uname}, _config.GetConnectionString("default"));

            string sql2 = "select * from images WHERE Username = @username";
            pictures = await _data.LoadData<ImageModel, dynamic>(sql2, new { username = Uname }, _config.GetConnectionString("default"));
            copyimage = false;
        }

    }

    private async Task Upload()
    {
        string sql2 = "update useraccount SET profilepicture = @image WHERE Username = @username";

        await _data.SaveData(sql2, new { image = Image, username = Uname }, _config.GetConnectionString("default"));

        Login.Profilepic = pic;
    }

    public async Task Deleteenable()
    {
        foreach(var I in pictures)
        {
            if (Images.Image_Name == I.Image_Name)
            {
                nullvalue = false;
                string sql = "DELETE FROM images WHERE image_name = @imagename";
                await _data.SaveData(sql, new { imagename = Images.Image_Name }, _config.GetConnectionString("default"));

                string sql2 = "select * from images WHERE Username = @username";
                pictures = await _data.LoadData<ImageModel, dynamic>(sql2, new { username = Uname }, _config.GetConnectionString("default"));
                notfound = false;
                nullvalue = false;
                return;

            }else if (Images.Image_Name == null || Images.Image_Name == "")
            {
                notfound = false;
                nullvalue = true;
                return;
            }else if (Images.Image_Name != I.Image_Name)
            {
                nullvalue = false;
                notfound = true;
                return;
            }
        }
    }
}
